version: "3.9"

services:
  db:
    image: postgres:15
    container_name: ticketing_postgres
    restart: always
    environment:
      POSTGRES_USER: ticketadmin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: ticketing
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./initdb/01_schema.sql:/docker-entrypoint-initdb.d/1_schema.sql
      - ./initdb/01_seed_data.sql:/docker-entrypoint-initdb.d/2_seed.sql
      - ./initdb/02_seed_data.sql:/docker-entrypoint-initdb.d/3_seed.sql
      - ./initdb/03_seed_data.sql:/docker-entrypoint-initdb.d/4_seed.sql
    ports:
      - "5432:5432"
    networks:
      - ticketing_net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ticketadmin && psql -U ticketadmin -d ticketing -c 'SELECT 1 FROM schedule LIMIT 1;'" ]
      interval: 10s
      timeout: 5s
      retries: 10

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ticketing_app
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/ticketing
      SPRING_DATASOURCE_USERNAME: ticketadmin
      SPRING_DATASOURCE_PASSWORD: secret
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      ZAP_TEST_APP_SECRET: ${ZAP_TEST_APP_SECRET}
      WHATSAPP_BUSINESS_API_TOKEN: ${WHATSAPP_BUSINESS_API_TOKEN}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ticketing_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "9080:80"
    depends_on:
      - db  # assumes your postgres service is named `db`
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ticketing_net

volumes:
  pgdata:
  pgadmin_data:

networks:
  ticketing_net:
    driver: bridge
